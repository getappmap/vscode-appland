import * as vscode from 'vscode';
import sinon from 'sinon';
import WorkspaceServices from '../../src/services/workspaceServices';
import { WorkspaceService, WorkspaceServiceInstance } from '../../src/services/workspaceService';
import assert from 'assert';

// TODO: This test does not work because vscode cannot be imported outside of the integration tests.

class MyWorkspaceFolder {
  constructor(public uri: vscode.Uri, public name: string, public index: number) {}
}

class MyWorkspaceFoldersChangeEvent {
  constructor(public added: MyWorkspaceFolder[], public removed: MyWorkspaceFolder[]) {}
}

class MyWorkspace {
  private _onDidChangeWorkspaceFolders: vscode.EventEmitter<
    MyWorkspaceFoldersChangeEvent
  > = new vscode.EventEmitter<MyWorkspaceFoldersChangeEvent>();
  public readonly onDidChangeWorkspaceFolders: vscode.Event<MyWorkspaceFoldersChangeEvent> = this
    ._onDidChangeWorkspaceFolders.event;

  constructor(public workspaceFolders: MyWorkspaceFolder[] = []) {}

  addFolder(folder: MyWorkspaceFolder) {
    this.workspaceFolders.push(folder);
    this._onDidChangeWorkspaceFolders.fire(new MyWorkspaceFoldersChangeEvent([folder], []));
  }

  removeFolder(folder: MyWorkspaceFolder) {
    const index = this.workspaceFolders.indexOf(folder);
    if (index === -1) throw new Error(`Folder ${folder.name} not found`);

    this.workspaceFolders.splice(index, 1);
    this._onDidChangeWorkspaceFolders.fire(new MyWorkspaceFoldersChangeEvent([], [folder]));
  }
}

class MyExtensionContext {
  constructor(public subscriptions: { dispose(): any }[] = []) {}
}

class MyWorkspaceServiceInstance implements WorkspaceServiceInstance {
  constructor(public folder: vscode.WorkspaceFolder) {}

  dispose() {
    console.log(`dispose MyWorkspaceServiceInstance ${this.folder.name}`);
  }
}

class MyWorkspaceService implements WorkspaceService {
  constructor(public instances: MyWorkspaceServiceInstance[] = []) {}

  create(folder: vscode.WorkspaceFolder): Promise<WorkspaceServiceInstance> {
    console.log(`MyWorkspaceService.create(${folder.uri.toString()})`);
    const instance = new MyWorkspaceServiceInstance(folder);
    this.instances.push(instance);
    return Promise.resolve(instance);
  }
}

describe('WorkspaceServices', () => {
  let context: MyExtensionContext;
  let workspace: MyWorkspace;
  let workspaceServices: WorkspaceServices;

  beforeEach(() => {
    context = new MyExtensionContext();
    workspace = new MyWorkspace([]);
    sinon.stub(vscode, 'workspace').returns(workspace);
    workspaceServices = new WorkspaceServices((context as unknown) as vscode.ExtensionContext);
  });
  afterEach(() => sinon.restore());

  describe('enroll', () => {
    it('enrolls an instance', async () => {
      const instances = await workspaceServices.enroll(new MyWorkspaceService());
      assert.strictEqual(instances.length, 0);
    });

    it('creates instances for existing folders', async () => {
      const folder = new MyWorkspaceFolder(
        vscode.Uri.file(`dummy/workspace`),
        'dummy-workspace',
        0
      );
      workspace.addFolder(folder);

      const workspaceService = new MyWorkspaceService();
      const instances = await workspaceServices.enroll(workspaceService);
      assert.strictEqual(instances.length, 1);
      assert.strictEqual(workspaceService.instances.length, 1);
    });

    it('creates new instances as a folder is added', async () => {
      const workspaceService = new MyWorkspaceService();

      assert.strictEqual(workspaceService.instances.length, 0);

      const folder = new MyWorkspaceFolder(
        vscode.Uri.file(`dummy/workspace`),
        'dummy-workspace',
        0
      );
      workspace.addFolder(folder);

      assert.strictEqual(workspaceService.instances.length, 1);
    });

    it('disposes of instances as a folder is removed', async () => {
      const folder = new MyWorkspaceFolder(
        vscode.Uri.file(`dummy/workspace`),
        'dummy-workspace',
        0
      );
      workspace.addFolder(folder);

      const workspaceService = new MyWorkspaceService();
      await workspaceServices.enroll(workspaceService);
      assert.strictEqual(workspaceService.instances.length, 1);

      workspace.removeFolder(folder);

      assert.strictEqual(workspaceService.instances.length, 0);
    });
  });
});
