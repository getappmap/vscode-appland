{
  "publisher": "appland",
  "name": "appmap",
  "displayName": "AppMap",
  "description": "Runtime diagrams + Navie AI Software Architect",
  "version": "0.117.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/getappmap/vscode-appland"
  },
  "qna": "https://appmap.io/docs/faq.html",
  "engines": {
    "vscode": "^1.82.0"
  },
  "agents": {
    "ruby": ">=0.60.0"
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "icon": "images/logo.png",
  "license": "MIT",
  "main": "./out/extension.js",
  "categories": [
    "Visualization",
    "Debuggers",
    "Testing"
  ],
  "keywords": [
    "code analysis",
    "diagram",
    "diff",
    "software design",
    "visualization",
    "observability",
    "testing",
    "monitoring",
    "tracing",
    "dependency",
    "architecture",
    "uml",
    "map",
    "technical debt",
    "security",
    "ruby",
    "python",
    "java",
    "javascript",
    "typescript"
  ],
  "contributes": {
    "customEditors": [
      {
        "viewType": "appmap.views.appMapFile",
        "displayName": "AppMap file",
        "selector": [
          {
            "filenamePattern": "*.appmap.json"
          },
          {
            "filenamePattern": "*.diff.sequence.json"
          }
        ],
        "priority": "default"
      }
    ],
    "commands": [
      {
        "command": "appmap.getAppmapState",
        "title": "AppMap: Copy Current AppMap State to Clipboard"
      },
      {
        "command": "appmap.setAppmapState",
        "title": "AppMap: Set AppMap State From Serialized String"
      },
      {
        "command": "appmap.findByName",
        "title": "AppMap: Find an AppMap by Name",
        "icon": "$(search-view-icon)"
      },
      {
        "command": "appmap.applyFilter",
        "title": "AppMap: Filter All AppMaps by Name",
        "icon": "$(extensions-filter)"
      },
      {
        "command": "appmap.openInstallGuide",
        "title": "AppMap: Open Install Guide"
      },
      {
        "command": "appmap.view.focusAppMap",
        "title": "AppMap: Open AppMaps View"
      },
      {
        "command": "appmap.view.focusInstructions",
        "title": "AppMap: Open Instructions"
      },
      {
        "command": "appmap.startRemoteRecording",
        "title": "AppMap: Start a Remote Recording",
        "icon": "images/record_start.svg"
      },
      {
        "command": "appmap.getRemoteRecordingStatus",
        "title": "AppMap: Get Remote Recording Status"
      },
      {
        "command": "appmap.stopRemoteRecording",
        "title": "AppMap: Stop the Remote Recording",
        "icon": "images/record_stop.svg"
      },
      {
        "command": "appmap.stopCurrentRemoteRecording",
        "title": "AppMap: Stop the Active Remote Recording",
        "icon": "images/record_stop.svg",
        "when": "appmap.recordingIsRunning"
      },
      {
        "command": "appmap.resetUsageState",
        "title": "AppMap: Reset Usage State"
      },
      {
        "command": "appmap.inspectCodeObject",
        "title": "AppMap: Inspect Code Object"
      },
      {
        "command": "appmap.deleteAllAppMaps",
        "title": "AppMap: Delete All AppMaps"
      },
      {
        "command": "appmap.openCodeObjectInAppMap",
        "title": "AppMap: Open Code Object in AppMap"
      },
      {
        "command": "appmap.touchOutOfDateTestFiles",
        "title": "AppMap: Touch Out-of-Date Test Files"
      },
      {
        "command": "appmap.copyOutOfDateTestsToClipboard",
        "title": "AppMap: Copy Out-of-Date Tests to Clipboard"
      },
      {
        "command": "appmap.context.openInFileExplorer",
        "title": "AppMap View: Open in File Explorer"
      },
      {
        "command": "appmap.context.openAsJson",
        "title": "AppMap View: Open as JSON",
        "icon": "$(bracket)"
      },
      {
        "command": "appmap.context.deleteAppMap",
        "title": "AppMap View: Delete AppMap",
        "icon": "$(trash)"
      },
      {
        "command": "appmap.context.rename",
        "title": "AppMap View: Rename AppMap"
      },
      {
        "command": "appmap.context.saveToCollection",
        "title": "AppMap View: Save To Collection"
      },
      {
        "command": "appmap.context.compareSequenceDiagrams",
        "title": "AppMap View: Compare Sequence Diagrams"
      },
      {
        "command": "appmap.context.inspectCodeObject",
        "title": "AppMap View: Inspect Code Object"
      },
      {
        "command": "appmap.context.deleteAppMaps",
        "title": "AppMap View: Delete AppMaps"
      },
      {
        "command": "appmap.generateOpenApi",
        "title": "AppMap: Generate OpenAPI"
      },
      {
        "command": "appmap.sequenceDiagram",
        "title": "AppMap: Generate Sequence Diagram"
      },
      {
        "command": "appmap.compareSequenceDiagrams",
        "title": "AppMap: Compare Sequence Diagrams"
      },
      {
        "command": "appmap.explain",
        "title": "AppMap: Explain with Navie AI"
      },
      {
        "command": "appmap.login",
        "title": "AppMap: Login"
      },
      {
        "command": "appmap.logout",
        "title": "AppMap: Logout"
      },
      {
        "command": "appmap.enterLicenseKey",
        "title": "AppMap: Enter License Key"
      },
      {
        "command": "appmap.updateAppMapTestConfig",
        "title": "AppMap: Add AppMap Test Configuration"
      },
      {
        "command": "appmap.updateAppMapLaunchConfig",
        "title": "AppMap: Add AppMap Launch Configuration"
      },
      {
        "command": "appmap.downloadLatestJavaJar",
        "title": "AppMap: Update Java Jar"
      },
      {
        "command": "appmap.openAIApiKey.set",
        "title": "AppMap: Set OpenAI API Key"
      },
      {
        "command": "appmap.openAIApiKey.status",
        "title": "AppMap: Check OpenAI API Key Status"
      }
    ],
    "configuration": {
      "title": "AppMap",
      "properties": {
        "appMap.applandUrl": {
          "type": "string",
          "default": "https://getappmap.com",
          "description": "URL of AppMap"
        },
        "appMap.apiUrl": {
          "type": "string",
          "default": "https://api.getappmap.com",
          "description": "URL of the AppMap API"
        },
        "appMap.viewConfiguration": {
          "type": "string",
          "description": "Default state of the AppMap view (obtain with AppMap: Copy Current State to Clipboard)"
        },
        "appMap.defaultDiagramView": {
          "type": "string",
          "description": "Default view on which to open the AppMap: viewComponent, viewSequence, or viewFlow",
          "default": "viewSequence"
        },
        "appMap.inspectEnabled": {
          "type": "boolean",
          "description": "Enable detailed inspection of AppMap code objects (preview)"
        },
        "appMap.plantUmlJarPath": {
          "type": "string",
          "description": "Location of Plant UML JAR (required to generate sequence diagrams) (preview)"
        },
        "appMap.commandLineToolsPath": {
          "type": "string",
          "description": "Location of AppMap command line tools (used for extension development only)"
        },
        "appMap.commandLineVerbose": {
          "type": "boolean",
          "description": "Enable verbose output from AppMap command line tools"
        },
        "appMap.commandLineEnvironment": {
          "type": "object",
          "description": "Environment variables to pass to AppMap command line tools. NOTE: Requires a restart to take effect.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "appMap.indexOptions": {
          "type": "string",
          "description": "Options to pass to the appmap index command"
        },
        "appMap.navie.rpcPort": {
          "type": "number",
          "description": "Port number to pass to the Navie UI (used for extension development and debugging only)"
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "appmap",
          "title": "AppMap",
          "icon": "images/logo.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "appmap.views.appmaps",
        "contents": "AppMap is initializing...",
        "when": "!appmap.initialized"
      },
      {
        "view": "appmap.views.appmaps",
        "contents": "All the AppMaps that are present in this workspace will be listed here.\n[Open Instructions](command:appmap.openInstallGuide)\n",
        "when": "appmap.initialized"
      },
      {
        "view": "appmap.views.appmaps",
        "contents": "Filter matched 0 results.\n[Apply a new filter](command:appmap.applyFilter)",
        "when": "appmap.initialized && appmap.hasData && appmap.numResults == 0"
      },
      {
        "view": "appmap.views.codeObjects",
        "contents": "AppMap is initializing...",
        "when": "!appmap.initialized"
      },
      {
        "view": "appmap.views.findings",
        "contents": "AppMap is initializing...",
        "when": "!appmap.initialized"
      }
    ],
    "views": {
      "appmap": [
        {
          "id": "appmap.views.signIn",
          "name": "Sign In",
          "visibility": "visible",
          "type": "webview",
          "when": "appMap.showSignIn"
        },
        {
          "id": "appmap.views.instructions",
          "name": "Instructions",
          "visibility": "visible",
          "when": "!appMap.showSignIn"
        },
        {
          "id": "appmap.views.appmaps",
          "name": "AppMaps",
          "contextualTitle": "AppMap",
          "visibility": "visible",
          "icon": "images/logo.svg",
          "when": "!appMap.showSignIn"
        },
        {
          "id": "appmap.views.findings",
          "name": "Runtime Analysis",
          "visibility": "visible",
          "when": "!appMap.showSignIn"
        },
        {
          "id": "appmap.views.codeObjects",
          "name": "Code Objects",
          "visibility": "collapsed",
          "when": "!appMap.showSignIn"
        },
        {
          "id": "appmap.views.documentation",
          "name": "Documentation",
          "visibility": "collapsed",
          "when": "!appMap.showSignIn"
        }
      ]
    },
    "menus": {
      "commandPalette": [
        {
          "command": "appmap.context.openInFileExplorer",
          "when": "false"
        },
        {
          "command": "appmap.context.rename",
          "when": "false"
        },
        {
          "command": "appmap.context.saveToCollection",
          "when": "false"
        },
        {
          "command": "appmap.context.inspectCodeObject",
          "when": "false"
        },
        {
          "command": "appmap.context.compareSequenceDiagrams",
          "when": "false"
        },
        {
          "command": "appmap.context.deleteAppMaps",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "appmap.applyFilter",
          "when": "view == appmap.views.appmaps && appmap.hasData",
          "group": "navigation@2"
        },
        {
          "command": "appmap.findByName",
          "when": "view == appmap.views.appmaps && appmap.hasData",
          "group": "navigation@1"
        },
        {
          "command": "appmap.startRemoteRecording",
          "when": "view == appmap.views.appmaps && !appmap.recordingIsRunning",
          "group": "navigation@0"
        },
        {
          "command": "appmap.stopCurrentRemoteRecording",
          "when": "view == appmap.views.appmaps && appmap.recordingIsRunning",
          "group": "navigation@0"
        }
      ],
      "view/item/context": [
        {
          "command": "appmap.context.openAsJson",
          "when": "view == appmap.views.appmaps && viewItem == appmap.views.appmaps.appMap",
          "group": "inline"
        },
        {
          "command": "appmap.context.deleteAppMap",
          "when": "view == appmap.views.appmaps && viewItem == appmap.views.appmaps.appMap",
          "group": "inline"
        },
        {
          "command": "appmap.context.openInFileExplorer",
          "when": "view == appmap.views.appmaps && viewItem == appmap.views.appmaps.appMap"
        },
        {
          "command": "appmap.context.rename",
          "when": "view == appmap.views.appmaps && viewItem == appmap.views.appmaps.appMap"
        },
        {
          "command": "appmap.context.saveToCollection",
          "when": "view == appmap.views.appmaps && viewItem == appmap.views.appmaps.appMap"
        },
        {
          "command": "appmap.context.compareSequenceDiagrams",
          "when": "view == appmap.views.appmaps && viewItem == appmap.views.appmaps.appMap"
        },
        {
          "command": "appmap.context.deleteAppMaps",
          "when": "view == appmap.views.appmaps && viewItem == appmap.views.appmaps.appMapCollection"
        },
        {
          "command": "appmap.context.inspectCodeObject",
          "when": "config.appMap.inspectEnabled == true && ( viewItem == appmap.views.codeObjects.package || viewItem == appmap.views.codeObjects.class || viewItem == appmap.views.codeObjects.function || viewItem == appmap.views.codeObjects.query || viewItem == appmap.views.codeObjects.route )"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "node build/updateResources.js && yarn compile",
    "lint": "eslint . --ext .ts",
    "pretest": "yarn run lint && tsc --strict --skipLibCheck",
    "test:precache": "node -e 'require(\"@vscode/test-electron\").downloadAndUnzipVSCode(process.env.VSCODE_INSIDERS_VERSION)'",
    "test:integration": "ts-node ./test/integrationTest.ts",
    "test:web-client": "mocha web/test/*.test.mjs",
    "test:system": "ts-node test/systemTest.ts",
    "test:unit": "mocha test/unit/**/*.test.[tj]s",
    "test:unit:some": "mocha",
    "test": "yarn test:unit && yarn test:web-client && yarn test:integration && yarn test:system",
    "compile": "NODE_ENV=production tsup --config tsup.config.ts",
    "watch": "tsup --config tsup.config.ts --watch",
    "package": "vsce package",
    "publish": "vsce publish",
    "semantic-release": "semantic-release",
    "list": "yarn info --json --recursive | build/translateInfo.js"
  },
  "devDependencies": {
    "@playwright/test": "^1.22.2",
    "@semantic-release/changelog": "^5.0.1",
    "@semantic-release/exec": "^5.0.0",
    "@semantic-release/git": "^9.0.0",
    "@types/chai-as-promised": "^7.1.5",
    "@types/chai-fs": "^2.0.2",
    "@types/fs-extra": "^9.0.13",
    "@types/glob": "^7.1.3",
    "@types/js-yaml": "^4.0.5",
    "@types/mocha": "^8.2.0",
    "@types/mockery": "^1.4.30",
    "@types/node": "^18",
    "@types/proper-lockfile": "^4.1.2",
    "@types/ps-node": "^0.1.1",
    "@types/semver": "^7.3.9",
    "@types/sinon": "^10.0.2",
    "@types/sinon-chai": "^3.2.9",
    "@types/tmp": "^0.2.3",
    "@types/vscode": "^1.82.0",
    "@typescript-eslint/eslint-plugin": "^5.52.0",
    "@typescript-eslint/parser": "^5.52.0",
    "@vscode/test-electron": "^2.3.8",
    "@vscode/vsce": "^2.19.0",
    "@vue/compiler-sfc": "^3.2.37",
    "browserify-fs": "^1.0.0",
    "buffer": "^6.0.3",
    "chai": "^4.3.6",
    "chai-as-promised": "^7.1.1",
    "chai-fs": "^2.0.0",
    "clipboardy": "^2.3.0",
    "eslint": "^7.17.0",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-prettier": "^3.4.0",
    "fs-extra": "^10.1.0",
    "glob": "^7.2.3",
    "ignore": "^5.1.8",
    "jayson": "^4.1.0",
    "mocha": "^8.1.3",
    "mocha-suppress-logs": "^0.3.1",
    "mockery": "^2.1.0",
    "nock": "^13.5.4",
    "node-libs-browser": "^2.2.1",
    "openapi-types": "^12.1.3",
    "prettier": "^2.8.4",
    "prettier-eslint": "^12.0.0",
    "project-root-directory": "^1.0.3",
    "ps-node": "^0.1.6",
    "sass": "^1.32.2",
    "semantic-release": "^17.3.8",
    "sinon": "^11.1.2",
    "sinon-chai": "^3.7.0",
    "tape": "^5.1.1",
    "temp": "^0.9.4",
    "tmp": "^0.2.1",
    "ts-node": "^10.9.1",
    "tslib": "^2.1.0",
    "tsup": "^6.6.3",
    "typescript": "^4.9.5",
    "vscode-uri": "^3.0.7",
    "yaml": "^2.1.1"
  },
  "dependencies": {
    "@appland/appmap": "^3.129.0",
    "@appland/client": "^1.14.1",
    "@appland/components": "^4.12.0",
    "@appland/diagrams": "^1.8.0",
    "@appland/models": "^2.10.0",
    "@appland/rpc": "latest",
    "@appland/scanner": "^1.86.0",
    "@appland/sequence-diagram": "^1.12.0",
    "@yarnpkg/parsers": "^3.0.0-rc.45",
    "bootstrap": "^4.5.3",
    "bootstrap-autocomplete": "^2.3.7",
    "diff": "^5.1.0",
    "highlight.js": "^11.9.0",
    "jquery": "^3.5.1",
    "js-yaml": "^4.1.0",
    "node-fetch": "^2.7.0",
    "popper.js": "^1.16.1",
    "proper-lockfile": "^4.1.2",
    "semver": "^7.3.5",
    "vscode-extension-telemetry": "^0.1.7",
    "vue": "^2.7.14",
    "vue-template-compiler": "^2.7.14",
    "vuex": "^3.6.0"
  },
  "__metadata": {
    "id": "41d86b02-68d3-4049-9422-95da6d11cc2e",
    "publisherDisplayName": "AppLand",
    "publisherId": "f7f1004e-6038-49cd-a096-4e618fe53f77",
    "isPreReleaseVersion": false
  },
  "packageManager": "yarn@3.2.3"
}
